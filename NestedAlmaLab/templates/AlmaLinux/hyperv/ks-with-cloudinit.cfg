# AlmaLinux 9 Kickstart Configuration with cloud-init support
# This kickstart file builds a template that supports cloud-init for post-deployment configuration

# Installation method
text
cdrom

# Language and keyboard
lang en_US.UTF-8
keyboard us

# Network configuration - DHCP for build, cloud-init will configure static later
network --bootproto=static --ip=192.168.200.100 --netmask=255.255.255.0 --gateway=192.168.200.1 --nameserver=8.8.8.8 --hostname=almalinux-template --device=eth0 --activate

# Root password (template default - cloud-init can change this)
rootpw packer

# User account (template default - cloud-init can add more users)
user --name=labuser --password=labpass123! --groups=wheel

# Authentication
authselect select minimal with-faillock without-nullok

# Timezone
timezone UTC

# Partitioning (automatic LVM partitioning)
autopart --type=lvm
clearpart --all --drives=sda

# Bootloader
bootloader --location=mbr

# SELinux
selinux --enforcing

# Firewall
firewall --enabled --ssh

# Services
services --enabled=sshd,NetworkManager,cloud-init,cloud-config,cloud-final

# Package installation
%packages --ignoremissing --excludedocs
@core
@standard
# Cloud-init packages
cloud-init
cloud-utils-growpart

# Network and system management
NetworkManager
NetworkManager-wifi
network-scripts
net-tools
wget
curl
rsync

# System utilities
vim-enhanced
nano
htop
tree
unzip
tar
which
sudo
man-pages

# Development tools (optional)
git
gcc
make

# Hyper-V integration
hyperv-daemons
cifs-utils

# Remove unnecessary packages to save space
-biosdevname
-iprutils
-plymouth*
-alsa-*
-iwl*firmware
%end

# Post-installation configuration
%post --log=/var/log/ks-post.log

#!/bin/bash

echo "Starting post-installation configuration..." >> /var/log/ks-post.log

# Configure SSH for password authentication (required for Packer)
echo "Configuring SSH for Packer access..." >> /var/log/ks-post.log

# Backup original sshd_config
cp /etc/ssh/sshd_config /etc/ssh/sshd_config.orig

# Create a completely new sshd_config file with our settings
echo "Creating new sshd_config file for Packer..." >> /var/log/ks-post.log

cat > /etc/ssh/sshd_config << 'SSHD_CONFIG'
# SSH configuration for Packer build - will be replaced by cloud-init
# This file is created during kickstart post-install

# Network
Port 22
AddressFamily any
ListenAddress 0.0.0.0
ListenAddress ::

# Host keys
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key

# Ciphers and keying
RekeyLimit default none

# Logging
SyslogFacility AUTHPRIV
LogLevel INFO

# Authentication - PACKER REQUIRES THESE SETTINGS
PermitRootLogin yes
PasswordAuthentication yes
ChallengeResponseAuthentication no
KerberosAuthentication no
GSSAPIAuthentication yes
GSSAPICleanupCredentials no
UsePAM yes

# Public key authentication
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys

# Connection settings
X11Forwarding no
AllowTcpForwarding yes
GatewayPorts no
X11DisplayOffset 10
X11UseLocalhost yes
PermitTTY yes
PrintMotd no
PrintLastLog yes
TCPKeepAlive yes
PermitUserEnvironment no
Compression delayed
ClientAliveInterval 0
ClientAliveCountMax 3
UseDNS no
PidFile /run/sshd.pid
MaxStartups 10:30:100
PermitTunnel no
ChrootDirectory none
VersionAddendum none

# Accept locale-related environment variables
AcceptEnv LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES
AcceptEnv LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT
AcceptEnv LC_IDENTIFICATION LC_ALL LANGUAGE
AcceptEnv XMODIFIERS

# SFTP subsystem
Subsystem sftp /usr/libexec/openssh/sftp-server

# Example of overriding settings on a per-user basis
#Match User anoncvs
#	X11Forwarding no
#	AllowTcpForwarding no
#	PermitTTY no
#	ForceCommand cvs server
SSHD_CONFIG

# Create a marker file to indicate Packer SSH configuration is active
echo "PACKER_SSH_CONFIG=active" > /etc/ssh/.packer-ssh-marker

echo "SSH configured for Packer access - new config file created" >> /var/log/ks-post.log

# Verify the configuration
echo "Current SSH configuration:" >> /var/log/ks-post.log
grep -E "^(PermitRootLogin|PasswordAuthentication|PubkeyAuthentication)" /etc/ssh/sshd_config >> /var/log/ks-post.log

# Create a systemd service to enforce SSH config on boot
cat > /etc/systemd/system/packer-ssh-enforce.service << 'SERVICE'
[Unit]
Description=Enforce Packer SSH Configuration
After=sshd.service
Before=multi-user.target

[Service]
Type=oneshot
ExecStart=/bin/bash -c "if [ -f /etc/ssh/.packer-ssh-marker ]; then sed -i 's/^#*PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config; sed -i 's/^#*PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config; systemctl restart sshd; fi"
RemainAfterExit=true

[Install]
WantedBy=multi-user.target
SERVICE

# Enable the SSH enforcement service
systemctl enable packer-ssh-enforce.service

# Ensure SSH service will start
systemctl enable sshd

# Enable and configure cloud-init
echo "Configuring cloud-init..." >> /var/log/ks-post.log

# Create cloud-init configuration
cat > /etc/cloud/cloud.cfg << 'EOF'
# Cloud-init configuration for AlmaLinux template
users:
  - default

disable_root: false
ssh_pwauth: True

# Cloud init modules
cloud_init_modules:
  - migrator
  - seed_random
  - bootcmd
  - write-files
  - growpart
  - resizefs
  - disk_setup
  - mounts
  - set_hostname
  - update_hostname
  - update_etc_hosts
  - ca-certs
  - rsyslog
  - users-groups
  - ssh

cloud_config_modules:
  - ssh-import-id
  - locale
  - set-passwords
  - yum-add-repo
  - ntp
  - timezone
  - disable-ec2-metadata
  - runcmd

cloud_final_modules:
  - package-update-upgrade-install
  - write-files-deferred
  - puppet
  - chef
  - mcollective
  - salt-minion
  - rightscale_userdata
  - scripts-vendor
  - scripts-per-once
  - scripts-per-boot
  - scripts-per-instance
  - scripts-user
  - ssh-authkey-fingerprints
  - keys-to-console
  - phone-home
  - final-message
  - power-state-change

# System info
system_info:
  default_user:
    name: labuser
    lock_passwd: false
    gecos: Lab User
    groups: [wheel, adm, systemd-journal]
    sudo: ["ALL=(ALL) NOPASSWD:ALL"]
    shell: /bin/bash
  distro: rhel
  paths:
    cloud_dir: /var/lib/cloud
    run_dir: /run/cloud-init
  ssh_svcname: sshd

# Data sources
datasource_list: [ NoCloud, None ]
datasource:
  NoCloud:
    # Support for NoCloud data source (ISO or files)
    seedfrom: /var/lib/cloud/seed/nocloud/
EOF

# Create cloud-init NoCloud directory
mkdir -p /var/lib/cloud/seed/nocloud

# Configure cloud-init to run on every boot for NoCloud
cat > /etc/cloud/cloud.cfg.d/99_nocloud.cfg << 'EOF'
# Enable NoCloud data source
datasource_list: [ NoCloud ]
datasource:
  NoCloud:
    # Look for seed data in multiple locations
    seedfrom: /var/lib/cloud/seed/nocloud/
EOF

# Add cloud-init configuration to clean up Packer SSH settings on first boot
cat > /etc/cloud/cloud.cfg.d/99_cleanup_packer.cfg << 'EOF'
# Clean up Packer-specific SSH configuration on first boot
runcmd:
  - |
    # Check if this is a template with Packer SSH configuration
    if [ -f /etc/ssh/.packer-ssh-marker ]; then
        echo "Detected Packer SSH configuration - applying secure settings" >> /var/log/cloud-init.log
        
        # Disable and remove the Packer SSH enforcement service
        systemctl disable packer-ssh-enforce.service
        rm -f /etc/systemd/system/packer-ssh-enforce.service
        systemctl daemon-reload
        echo "Removed Packer SSH enforcement service" >> /var/log/cloud-init.log
        
        # Restore original sshd_config and apply secure settings
        if [ -f /etc/ssh/sshd_config.orig ]; then
            cp /etc/ssh/sshd_config.orig /etc/ssh/sshd_config
            echo "Restored original sshd_config" >> /var/log/cloud-init.log
        fi
        
        # Apply secure SSH configuration to main config file
        sed -i 's/^#*PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config
        sed -i 's/^#*PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config
        sed -i 's/^#*PubkeyAuthentication.*/PubkeyAuthentication yes/' /etc/ssh/sshd_config
        sed -i 's/^#*UsePAM.*/UsePAM yes/' /etc/ssh/sshd_config
        
        # Ensure secure settings exist
        if ! grep -q "^PermitRootLogin" /etc/ssh/sshd_config; then
            echo "PermitRootLogin no" >> /etc/ssh/sshd_config
        fi
        if ! grep -q "^PasswordAuthentication" /etc/ssh/sshd_config; then
            echo "PasswordAuthentication yes" >> /etc/ssh/sshd_config
        fi
        
        # Add additional security settings
        cat >> /etc/ssh/sshd_config << 'SECURESSH'

# Security settings added by cloud-init
X11Forwarding no
AllowTcpForwarding yes
ClientAliveInterval 300
ClientAliveCountMax 2
MaxAuthTries 3
MaxSessions 10
SECURESH
        
        # Remove the Packer marker
        rm -f /etc/ssh/.packer-ssh-marker
        
        # Restart SSH to apply new configuration
        systemctl restart sshd
        echo "Applied secure SSH configuration for deployed VM" >> /var/log/cloud-init.log
    else
        echo "No Packer SSH marker found - skipping SSH cleanup" >> /var/log/cloud-init.log
    fi
EOF

# Enable cloud-init services
systemctl enable cloud-init-local
systemctl enable cloud-init
systemctl enable cloud-config
systemctl enable cloud-final

echo "Cloud-init services enabled" >> /var/log/ks-post.log

# Configure NetworkManager to be cloud-init friendly
echo "Configuring NetworkManager for cloud-init..." >> /var/log/ks-post.log
cat > /etc/NetworkManager/conf.d/99-cloud-init.conf << 'EOF'
[main]
dns=default
rc-manager=file

[logging]
level=INFO
domains=ALL

[device]
wifi.scan-rand-mac-address=no
EOF

# Ensure NetworkManager manages all interfaces
rm -f /etc/sysconfig/network-scripts/ifcfg-*

# Configure static IP network interface for Packer build
# Cloud-init will override this later with deployment-specific IPs
cat > /etc/NetworkManager/system-connections/eth0.nmconnection << 'EOF'
[connection]
id=eth0
type=ethernet
interface-name=eth0
autoconnect=true

[ethernet]

[ipv4]
method=manual
address1=192.168.200.100/24,192.168.200.1
dns=8.8.8.8;8.8.4.4;

[ipv6]
method=ignore
EOF

chmod 600 /etc/NetworkManager/system-connections/eth0.nmconnection

# Configure sudo for wheel group (cloud-init users)
echo '%wheel ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers.d/wheel-nopasswd

# Set up log rotation for cloud-init
cat > /etc/logrotate.d/cloud-init << 'EOF'
/var/log/cloud-init*.log {
    daily
    missingok
    rotate 7
    compress
    notifempty
    create 644 root root
}
EOF

# Verify labuser creation
if id "labuser" &>/dev/null; then
    echo "User 'labuser' successfully created" >> /var/log/ks-post.log
    # Ensure labuser can sudo
    usermod -aG wheel labuser
    echo "Added labuser to wheel group" >> /var/log/ks-post.log
else
    echo "WARNING: User 'labuser' was not created!" >> /var/log/ks-post.log
fi

# Create a simple test script for cloud-init
cat > /usr/local/bin/test-cloud-init << 'EOF'
#!/bin/bash
echo "=== Cloud-init Status ==="
cloud-init status --long

echo -e "\n=== Cloud-init Configuration ==="
if [ -f /var/lib/cloud/seed/nocloud/user-data ]; then
    echo "NoCloud user-data found:"
    head -20 /var/lib/cloud/seed/nocloud/user-data
else
    echo "No NoCloud user-data found"
fi

echo -e "\n=== Network Configuration ==="
ip addr show
nmcli connection show

echo -e "\n=== Recent Cloud-init Logs ==="
tail -20 /var/log/cloud-init.log 2>/dev/null || echo "No cloud-init logs found"
EOF

chmod +x /usr/local/bin/test-cloud-init

# Final system configuration
echo "Finalizing system configuration..." >> /var/log/ks-post.log

# Update all packages to latest
dnf update -y >> /var/log/ks-post.log 2>&1

# Clean package cache
dnf clean all >> /var/log/ks-post.log 2>&1

# Clear machine-id (will be regenerated on first boot)
echo -n > /etc/machine-id

# Clear SSH host keys (will be regenerated by cloud-init)
rm -f /etc/ssh/ssh_host_*

# Clear network persistent rules
rm -f /etc/udev/rules.d/70-persistent-net.rules

# Clean logs
find /var/log -type f -name "*.log" -exec truncate -s 0 {} \;

echo "Post-installation configuration completed successfully" >> /var/log/ks-post.log
echo "Cloud-init is ready to configure the system on first boot" >> /var/log/ks-post.log

%end

# Reboot after installation
reboot
