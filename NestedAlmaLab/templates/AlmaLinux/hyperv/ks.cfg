# AlmaLinux 9.4 Kickstart for Hyper-V - Generation 2 VMs
# Optimized for Hyper-V synthetic network adapters and UEFI boot

# Installation method and interface
text
cdrom

# System configuration
firstboot --disable
skipx
reboot

# Regional settings
lang en_US.UTF-8
keyboard us
timezone UTC --utc

# Network configuration - Static IP for Azure nested VMs
# Use static IP since no DHCP is available in Azure nested environment
network --bootproto=static --device=link --onboot=yes --activate --noipv6 --ip=192.168.200.100 --netmask=255.255.255.0 --gateway=192.168.200.1 --nameserver=8.8.8.8,8.8.4.4
network --hostname=almavm-hyperv

# Authentication and security
rootpw --plaintext packer
user --name=labuser --password=labpass123! --plaintext --groups=wheel --homedir=/home/labuser --shell=/bin/bash
authselect select sssd with-mkhomedir --force
firewall --enabled --ssh
selinux --enforcing

# Boot loader configuration - UEFI optimized for Hyper-V
bootloader --location=boot --append="console=tty0 console=ttyS0,115200n8 net.ifnames=0 biosdevname=0 elevator=noop"

# Installation destination - use automatic partitioning
zerombr
clearpart --all --initlabel
autopart --type=lvm

# Package selection - minimal but functional for Hyper-V
%packages --ignoremissing --excludedocs
@core
@base
openssh-server
vim-enhanced
wget
curl
net-tools
bind-utils
hyperv-daemons
hyperv-tools
# Remove unnecessary packages
-plymouth*
-fprintd-pam
-intltool
-iwl*firmware
-aic94xx-firmware
-alsa-*
-ivtv-firmware
%end

# Pre-installation script
%pre --log=/var/log/ks-pre.log
echo "Starting AlmaLinux Hyper-V kickstart installation at $(date)" >> /var/log/ks-pre.log

# Detect and log network interfaces
echo "Available network interfaces:" >> /var/log/ks-pre.log
ip link show >> /var/log/ks-pre.log

# Load Hyper-V network driver early if needed
modprobe hv_netvsc
%end

# Post-installation script
%post --log=/var/log/ks-post.log
echo "Starting post-installation configuration at $(date)" >> /var/log/ks-post.log

# Configure SSH for lab access BEFORE starting the service
# This ensures Packer can connect via SSH
echo "Configuring SSH for root access..." >> /var/log/ks-post.log

# Make sure SSH config allows root login and password authentication
cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup
sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
sed -i 's/#PermitRootLogin yes/PermitRootLogin yes/' /etc/ssh/sshd_config
sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
sed -i 's/PermitRootLogin no/PermitRootLogin yes/' /etc/ssh/sshd_config
sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config

# Add explicit settings to ensure they're set
echo "" >> /etc/ssh/sshd_config
echo "# Packer build settings" >> /etc/ssh/sshd_config
echo "PermitRootLogin yes" >> /etc/ssh/sshd_config
echo "PasswordAuthentication yes" >> /etc/ssh/sshd_config
echo "PubkeyAuthentication yes" >> /etc/ssh/sshd_config
echo "ChallengeResponseAuthentication no" >> /etc/ssh/sshd_config

# Enable and start SSH service
systemctl enable sshd
systemctl start sshd

# Wait a moment and restart to ensure config is loaded
sleep 5
systemctl restart sshd

# Verify SSH is running and configuration
echo "SSH service status:" >> /var/log/ks-post.log
systemctl status sshd --no-pager >> /var/log/ks-post.log
echo "SSH config verification:" >> /var/log/ks-post.log
grep -E "(PermitRootLogin|PasswordAuthentication)" /etc/ssh/sshd_config >> /var/log/ks-post.log

# Install EPEL repository
dnf install -y epel-release

# Update system
dnf update -y

# Install Hyper-V integration services
dnf install -y hyperv-daemons hyperv-tools

# Enable Hyper-V services
systemctl enable hypervkvpd
systemctl enable hypervvssd
systemctl enable hypervfcopyd

# Configure network for Hyper-V
# Create network configuration that works with Hyper-V synthetic adapters
cat > /etc/NetworkManager/conf.d/10-hyperv.conf << 'EOF'
[main]
no-auto-default=*
[connection]
ipv6.method=ignore
[device]
wifi.scan-rand-mac-address=no
EOF

# Ensure NetworkManager is enabled
systemctl enable NetworkManager

# Configure persistent network interface naming for Hyper-V
# This helps with consistent interface names across reboots
cat > /etc/udev/rules.d/70-persistent-net.rules << 'EOF'
# Hyper-V synthetic network adapter
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="hv_netvsc", NAME="eth0"
EOF

# Create a static IP network configuration
cat > /etc/NetworkManager/system-connections/eth0.nmconnection << 'EOF'
[connection]
id=eth0
type=ethernet
interface-name=eth0
autoconnect=true

[ethernet]

[ipv4]
method=manual
address1=192.168.200.100/24,192.168.200.1
dns=8.8.8.8;8.8.4.4;

[ipv6]
method=ignore
EOF

chmod 600 /etc/NetworkManager/system-connections/eth0.nmconnection

# Configure GRUB for better Hyper-V compatibility
sed -i 's/GRUB_CMDLINE_LINUX="[^"]*/\& console=tty0 console=ttyS0,115200n8 net.ifnames=0 biosdevname=0/' /etc/default/grub

# Update GRUB config - handle both BIOS and UEFI
if [ -d "/boot/efi/EFI" ]; then
    # UEFI/Generation 2 - find the correct path
    EFI_DIR=$(find /boot/efi/EFI -name "grub.cfg" -o -name "*.cfg" | head -1 | dirname)
    if [ -n "$EFI_DIR" ]; then
        grub2-mkconfig -o "$EFI_DIR/grub.cfg"
    else
        # Fallback for AlmaLinux default
        grub2-mkconfig -o /boot/efi/EFI/almalinux/grub.cfg
    fi
else
    # BIOS/Generation 1
    grub2-mkconfig -o /boot/grub2/grub.cfg
fi

# Create a lab user
echo "Creating lab user 'labuser'..." >> /var/log/ks-post.log

# Create the labuser account
if ! id "labuser" >/dev/null 2>&1; then
    useradd -m -s /bin/bash -c "Lab User" labuser
    echo "User 'labuser' created successfully" >> /var/log/ks-post.log
else
    echo "User 'labuser' already exists" >> /var/log/ks-post.log
fi

# Set password for labuser
echo "labuser:labpass123!" | chpasswd
if [ $? -eq 0 ]; then
    echo "Password set successfully for labuser" >> /var/log/ks-post.log
else
    echo "Failed to set password for labuser" >> /var/log/ks-post.log
fi

# Add labuser to wheel group for sudo access
usermod -aG wheel labuser
if [ $? -eq 0 ]; then
    echo "Added labuser to wheel group" >> /var/log/ks-post.log
else
    echo "Failed to add labuser to wheel group" >> /var/log/ks-post.log
fi

# Configure sudo for lab user
echo "labuser ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/labuser
chmod 440 /etc/sudoers.d/labuser
if [ -f "/etc/sudoers.d/labuser" ]; then
    echo "Sudo configuration created for labuser" >> /var/log/ks-post.log
else
    echo "Failed to create sudo configuration for labuser" >> /var/log/ks-post.log
fi

# Verify user creation
echo "User verification:" >> /var/log/ks-post.log
id labuser >> /var/log/ks-post.log 2>&1
echo "Home directory: $(ls -la /home/labuser 2>/dev/null || echo 'Not found')" >> /var/log/ks-post.log

# Configure basic firewall rules for lab
firewall-cmd --permanent --add-service=ssh
firewall-cmd --permanent --add-port=22/tcp
firewall-cmd --reload

# Create enhanced welcome message
cat << 'EOF' > /etc/motd
===============================================
AlmaLinux VM ready - Hyper-V Optimized
===============================================
Version: Hyper-V optimized build
Root password: packer
Lab user: labuser / labpass123!
SSH enabled on all interfaces

Hyper-V Integration Services: Enabled
Network: Synthetic adapter with DHCP
Console: Available via Hyper-V connect

Installed packages:
- Hyper-V daemons and tools
- Network utilities
- Development basics
===============================================
EOF

# Enable cloud-init for template usage
if rpm -q cloud-init >/dev/null 2>&1; then
    systemctl enable cloud-init
    systemctl enable cloud-init-local
    systemctl enable cloud-config
    systemctl enable cloud-final
fi

# Create network diagnostics script
cat > /usr/local/bin/network-diag.sh << 'EOF'
#!/bin/bash
echo "=== Network Diagnostics ==="
echo "Date: $(date)"
echo "Hostname: $(hostname)"
echo ""
echo "Network Interfaces:"
ip addr show
echo ""
echo "Routing Table:"
ip route show
echo ""
echo "DNS Configuration:"
cat /etc/resolv.conf
echo ""
echo "NetworkManager Status:"
systemctl status NetworkManager --no-pager
echo ""
echo "Hyper-V Network Status:"
systemctl status hypervkvpd --no-pager
EOF

chmod +x /usr/local/bin/network-diag.sh

# Log completion
echo "Kickstart post-installation completed at $(date)" >> /var/log/ks-post.log
echo "System ready for Hyper-V lab use" >> /var/log/ks-post.log
echo "Run 'network-diag.sh' for network troubleshooting" >> /var/log/ks-post.log
%end

# Reboot after installation
reboot
